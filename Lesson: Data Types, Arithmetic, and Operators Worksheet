// Aaron Jones - Data Types, Arithmetic, and Operators Worksheet

// C++ Data Types
// In C++ there are 3 different data types: numbers, text (characters), and booleans (true/false)
// Numbers: int (integer), float (decimal), double (double-precision decimal)
// Text: char (character)
// Boolean: bool (true or false)

// Ex:
int a = 1;
char b = 'c';
double d = 4.4;
bool e = true;

// C++ Text (Characters)
// Characters are letters, digits, or symbols
// Characters have to be enclosed in quotes
// For strings, we use the string class from the C++ Library

// Ex:
char greeting = 'H'; //(one character)
string greeting2 = "Hi, my name is Aaron."; // string ex

// C++ Numbers
// Numbers in C++ start with a digit (0-9), a dot (for decimal/floating-point numbers), or a minus sign (for negative numbers).
// Integers (int) are whole numbers (no decimal)
// Floating-point numbers/decimals (float/double) have a decimal

// Integers
// A whole number, positive or negative
int x = 10;

// Floats and Doubles
// Any valid number that has a decimal 
float g = 2.87;  // Float ex
double f = 2.718281828459;  // Double ex

//double typically is a more precise version of a float

// Boolean Values
// Booleans aren't strings so no quotation marks

bool result1 = 10 > 9;  // returns true
bool result2 = 10 == 9; // returns false
bool result3 = 10 < 9;  // returns false

cout << boolalpha; // To print bool values as true/false instead of 1/0
cout << result1;
cout << result2;
cout << result3;

// How to cast data types
int j = 1; // Original data type is integer
double k = 2.8; // Original data type is double

float w = static_cast<float>(j); // value changed -> is now: 1.0
int q = static_cast<int>(k); // value changed -> is now: 2
string l = to_string(k); // value changed -> is now: '2.8'

// --C++ Operators--

// Arithmetic Operators

// + Addition (x + y)

// - Subtraction (x - y)

// * Multiplication (x * y)

// / Division (x / y)

// % Modulus (x % y)

// ** For exponents - (C++ does not have a built-in operator (like ** for python) for exponents, so instead use pow(x, y) from the <cmath> library)

// // For floor division - (C++ does not have a built-in operator (like // for python) for floor division, so instead use floor(x / y) from the <cmath> library)

cout << 4 + 3;
cout << 62 * 8;
cout << 9 / 3;

// Assignment Operator

// = assigns values to variables (similar to python)

int t = 15;

// Comparison Operators

// == equals (x == y)

// != not equals (x != y)

// > greater than (x > y)

// < less than (x < y)

// >= greater than or equal to (x >= y)

// <= less than or equal to (x <= y)

// All of these above return true or false

cout << (11 != 5);
cout << (14 >= 6);
cout << (8 <= 8);

